<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.16.15/windowszip/v1.16.15-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.16.15"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @(  )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# These windows nvidia gpu driver are used by windows cse
$global:GpuDriverCudaUrl = "";
$global:GpuDriverGridUrl = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

try
{
    Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.33.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }

    Write-Log "calvin: cuda gpu url is set to $global:GpuDriverCudaUrl"
    Write-Log "calvin: grid gpu url is set to $global:GpuDriverGridUrl"

    # Download CSE function scripts
    Write-Log "Getting CSE scripts"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows"
    Remove-Item -Path $tempfile -Force

    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Write-Log "Install OpenSSH"
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Write-Log "Apply telemetry data setting"
    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Write-Log "Resize os drive if possible"
    Resize-OSDrive

    Write-Log "Initialize data disks"
    Initialize-DataDisks

    Write-Log "Create required data directories as needed"
    Initialize-DataDirectories

    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts

    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

    Write-Log "Download kubelet binaries and unzip"
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL

    # This overwrites the binaries that are downloaded from the custom packge with binaries.
    # The custom package has a few files that are necessary for future steps (nssm.exe)
    # this is a temporary work around to get the binaries until we depreciate
    # custom package and nssm.exe as defined in aks-engine#3851.
    if ($global:WindowsKubeBinariesURL){
        Write-Log "Overwriting kube node binaries from $global:WindowsKubeBinariesURL"
        Get-KubeBinaries -KubeBinariesURL $global:WindowsKubeBinariesURL
    }

    Write-Log "Installing ContainerD"
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }
    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion

    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment

    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-Log "Write Azure cloud provider config"
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-Log "Write ca root"
    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir

    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Write TLS bootstrap kubeconfig"
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken

        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate

    if ($global:EnableHostsConfigAgent) {
        Write-Log "Starting hosts config agent"
        New-HostsConfigService
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule

    Write-Log "Installing Azure VNet plugins"
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL

    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled

    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled

    Install-KubernetesServices `
        -KubeDir $global:KubeDir

    Write-Log "Disable Internet Explorer compat mode and set homepage"
    Set-Explorer

    Write-Log "Adjust pagefile size"
    Adjust-PageFileSize

    Write-Log "Start preProvisioning script"
    

    Write-Log "Update service failure actions"
    Update-ServiceFailureActions
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences


    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Write-Log "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Write-Log "Enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Write-Log "Start to install Windows gmsa package"
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Write-Log "Start calico installation"
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }
    
    $RebootNeeded = $false

    if ($global:ConfigGPUDriverIfNeeded) {
        . c:\AzureData\windows\nvidiagpudriverfunc.ps1
        Write-Log "Start GPU installation"
        $result = Start-InstallGPUDriver
        if ($result.RebootNeeded) {
            $RebootNeeded = $true
        }
    }

    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks-engine bits cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    Write-Log "Setup Complete, starting NodeResetScriptTask to register Winodws node without reboot"
    Start-ScheduledTask -TaskName "k8s-restart-job"

    $timeout = 180 ##  seconds
    $timer = [Diagnostics.Stopwatch]::StartNew()
    while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
        # The task `k8s-restart-job` needs ~8 seconds.
        if ($timer.Elapsed.TotalSeconds -gt $timeout) {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
        }

        Write-Log -Message "Waiting on NodeResetScriptTask..."
        Start-Sleep -Seconds 3
    }
    $timer.Stop()
    Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"

    if ($RebootNeeded) {
        Postpone-RestartComputer
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration"

    # Windows CSE does not return any error message so we cannot generate below content as the response
    # $JsonString = "ExitCode: `"{0}`", Output: `"{1}`", Error: `"{2}`", ExecDuration: `"{3}`"" -f $global:ExitCode, "", $global:ErrorMessage, $ExecutionDuration.TotalSeconds
    Write-Log "Generate CSE result to $CSEResultFilePath : $global:ExitCode"
    echo $global:ExitCode | Out-File -FilePath $CSEResultFilePath -Encoding utf8

    # Flush stdout to C:\AzureData\CustomDataSetupScript.log
    [Console]::Out.Flush()

    Upload-GuestVMLogs -ExitCode $global:ExitCode
}
